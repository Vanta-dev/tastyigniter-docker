version: "3.8"

services:
  db:
    image: mysql:8.0
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
    environment:
      - MYSQL_DATABASE=${SERVICE_DB_NAME_TASTYIGNITER}
      - MYSQL_USER=${SERVICE_USER_TASTYIGNITER}
      - MYSQL_PASSWORD=${SERVICE_PASSWORD_TASTYIGNITER}
      - MYSQL_ROOT_PASSWORD=${SERVICE_PASSWORD_TASTYIGNITER_ROOT}
    volumes:
      - db-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  redis:
    image: redis:8
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile
    user: www-data:www-data
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # FQDN público (Coolify lo inyecta)
      - APP_URL=${SERVICE_URL_TASTYIGNITER}

      # Base de datos (host = nombre del servicio)
      - DB_CONNECTION=mysql
      - DB_HOST=db
      - DB_PORT=3306
      - DB_DATABASE=${SERVICE_DB_NAME_TASTYIGNITER}
      - DB_USERNAME=${SERVICE_USER_TASTYIGNITER}
      - DB_PASSWORD=${SERVICE_PASSWORD_TASTYIGNITER}

      # Redis para sesión/cache
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - SESSION_LIFETIME=14400
      - REDIS_HOST=redis
      - REDIS_PORT=6379

      # Colas (puedes cambiar a database/redis luego)
      - QUEUE_CONNECTION=sync
    volumes:
      # Persiste /var/www/html (extensiones, temas, uploads)
      - ti-app:/var/www/html
    expose:
      - "80"
    healthcheck:
      # La app responde en /
      test: ["CMD-SHELL", "curl -fsS http://localhost/ || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 20
    restart: unless-stopped

volumes:
  db-data:
  ti-app:
